<?phpclass FileHelper{  public static function getCSVLength($filepath)  {    $handle = fopen($filepath,"r");	  $counter = 0;	  do {	    if ($data[0]) {	      $counter += 1;	    }    } while ($data = fgetcsv($handle));    	  return $counter;  }    public static function downloadArrayAsCsv($filename, $data, $delimiter = ',', $enclosure = '"', $encloseAll = false, $nullToMysqlNull = false )  {    $output = self::arrayToSCV($data, $delimiter, $enclosure, $encloseAll, $nullToMysqlNull);    header('Content-Type: text/csv; charset=utf-8');    header("Content-Disposition: attachment; filename={$filename}");        foreach ($output as $d) {      echo implode(',', $d) . "\n";    }  }    public static function arrayToSCV($data, $delimiter = ',', $enclosure = '"', $encloseAll = true, $nullToMysqlNull = false)  {    $delimiter_esc = preg_quote($delimiter, '/');    $enclosure_esc = preg_quote($enclosure, '/');    $output = array();    foreach ( $data as $fields ) {      $newRow = array();      foreach ( $fields as $field ) {        if ($field === null && $nullToMysqlNull) {            $newRow[] = 'NULL';            continue;        }        // Enclose fields containing $delimiter, $enclosure or whitespace        if ( $encloseAll || preg_match( "/(?:${delimiter_esc}|${enclosure_esc}|\s)/", $field ) ) {            $newRow[] = $enclosure . str_replace($enclosure, $enclosure . $enclosure, $field) . $enclosure;        }        else {            $newRow[] = $field;        }      }      $output[] = $newRow;    }    return $output;  }  	public static function getUploadedFile($uploadName)	{    $max_upload = (int)(ini_get('upload_max_filesize'));    $max_post = (int)(ini_get('post_max_size'));    $memory_limit = (int)(ini_get('memory_limit'));    $upload_mb = min($max_upload, $max_post, $memory_limit);    var_dump($max_upload);    var_dump($max_post);    var_dump($memory_limit);    var_dump($upload_mb);		$uploaded = $_FILES[$uploadName];		var_dump($_FILES);    die;    $file = array(			'name' => self::sanitizeFileName($uploaded['name']),			'type' => $uploaded['type'],			'temporaryPath' => $uploaded['tmp_name'],			'temporaryName' => self::getFileNameFromPath($uploaded['tmp_name']),			'extension' => self::getExtensionFromFileName($uploaded['name']),			'size' => $uploaded['size']		);				return (object) $file;			}		public function canUploadToDirectory($directory)  {    return is_dir($directory) && is_writable($directory);  }    public function createAllDirsInPath($folderpath)  {    $foldernames = explode('/', $folderpath);    $path = '/';    foreach ($foldernames as $f) {      if (strlen($f) > 0) {        $path .= $f.'/';        if (!is_dir($path)) {          mkdir($path, 0775);        }      }    }  }		public static function sanitizeFileName($fileName)	{		$fileName = preg_replace('/[\s]{1,}/', '-', $fileName);				// any character that is not a-z, A-Z, 0-9, -, _, or .		$notAllowedCharactersRegEx = '/[^a-zA-Z0-9-._]/';				return preg_replace($notAllowedCharactersRegEx, '', $fileName);	}		public static function generateRandomFileName($ext, $prefix = '')	{		$fileName = uniqid($prefix) . ".{$ext}";		return $fileName;	}			public static function changeExtension($newExtension, $fileName)	{		$fileName = self::removeExtension($fileName);		return $fileName . '.' . $newExtension;	}		public static function getFileNameFromPath($path)	{		$pathParts = explode('/', $path);		return $pathParts[count($pathParts) - 1];	}	private static function getExtensionFromFileName($fileName)	{		return strtolower(substr($fileName, (self::getExtensionLocation($fileName))));	}	private static function getExtensionLocation($fileName)	{		return strrpos($fileName, '.');	}	private static function removeExtension($fileName)	{		return substr($fileName, 0, self::getExtensionLocation($fileName));	}}